<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Build Personal Website with Hexo and GitHub Pages on Mac</title>
    <link href="/Build-Personal-Websiite-with-Hexo-and-GitHub-Pages-on-Mac/"/>
    <url>/Build-Personal-Websiite-with-Hexo-and-GitHub-Pages-on-Mac/</url>
    
    <content type="html"><![CDATA[<p><strong>Knock on new home’s door.</strong></p><blockquote><p>In this post:  </p><ul><li><p>Outline of how to build a personal blog</p></li><li><p>Useful links for reference</p></li></ul></blockquote><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>It has been long time since I would like to own a particular space to record my life, and until now I’ve finally started creating my personal website here. Among a varitey of schemes, I opt to <strong>Hexo + GitHub Pages</strong>, which is friendly to noob like me.  </p><p><a href="https://hexo.io/"><strong>Hexo</strong></a> is a fast, simple &amp; powerful blog framework. Simply write post in Markdown and Hexo generates static files deployed to GitHub Pages.  </p><p>As the first post, I am writing this article just in case anyone who is also interested in having a personal website but hasn’t been prepared yet. On the other hand, it will be an importent reference for myself to re-create the environment efficiently when I change the Mac or migrate data in the future.  </p><h3 id="Environment-setup"><a href="#Environment-setup" class="headerlink" title="Environment setup"></a>Environment setup</h3><p>Install Homebrew  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/bash <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubsuercontent.com/Homebrew/install/HEAD/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Install Node.js  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">node</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Install Git  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Install Hexo  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="Initialize-Hexo"><a href="#Initialize-Hexo" class="headerlink" title="Initialize Hexo"></a>Initialize Hexo</h3><p>Once Hexo is installed, create a new folder for Hexo, and keep in mind the <code>&lt;path&gt;</code>.  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token comment"># enter target folder</span>hexo init <span class="token comment"># initialize Hexo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>We can see essential folders&#x2F;files are generatred. And <strong>_config.yml</strong> is the “site config” file in Hexo root dict, personalize the top contents when required.  </p><p>Here are some basic commands to compile Hexo below.  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span class="token comment"># clear the static files and cache</span>hexo g<span class="token comment"># generate static web files locally</span>hexo s<span class="token comment"># start a local sever for preview</span>hexo d<span class="token comment"># deploy after generation finish</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Deploy-GitHub-Pages"><a href="#Deploy-GitHub-Pages" class="headerlink" title="Deploy GitHub Pages"></a>Deploy GitHub Pages</h3><p>Create a repo in GitHub named as <strong>username.github.io</strong>.  </p><p>Add SHH key to GitHub account.  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--glabal</span> user.name <span class="token string">"username"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"example@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>Then generate SHH key.  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"example@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Find a <strong>id_ras.pub</strong> file under dict <strong>&#x2F;User&#x2F;.ssh&#x2F;id_rsa.pub</strong>.  </p><p>Open <strong>id_ras.pub</strong> with TextEdit, and copy&#x2F;paste to Github account setting.</p><p>Check if successful.  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Install deployer plugin.  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Open <strong>_config.yml</strong> with TextEdit and scroll down to the bottom, modify as below.  </p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/username/username.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Deploy to GitHub Pages.  </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo g <span class="token parameter variable">--d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><strong>Now we can login our personal website tpying username.github.io</strong> <span class="github-emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">&#x1f389;</span>  </p><h3 id="Personalize-domain"><a href="#Personalize-domain" class="headerlink" title="Personalize domain"></a>Personalize domain</h3><p>It should be much cooler if we could have a custom domain. On top of <strong>GitHub Pages</strong>, my scheme is <strong>GoDaddy + Cloudflare</strong> - cheap, save and accessible.  </p><p>Here are the brief steps:  </p><p><strong>Step 1: Buy a domian from <a href="https://www.godaddy.com/en-uk">GoDaddy</a></strong>  </p><p><strong>Step 2: DNS management by <a href="https://www.cloudflare.com/">Cloudflare</a></strong>  </p><ul><li>Change to Cloudflare-branded nameservers  </li><li>Add DNS records with the <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">IP adresses for GitHub Pages</a></li></ul><p><strong>Step 3: GitHub custom domain</strong>  </p><p><strong>Step 4: HTTPS &amp; SSL encryption</strong>  </p><ul><li>Page rules set as “Always Use HTTPS”  </li><li>SSL&#x2F;TLS encryption set as “Full”  </li><li>Tick “Always Use HTTPS” under Edge Certificates</li></ul><p><strong>Now we can login our personal website typing custom domain</strong> <span class="github-emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">&#x1f389;</span> <span class="github-emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">&#x1f389;</span></p>]]></content>
    
    
    <categories>
      
      <category>Computer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
